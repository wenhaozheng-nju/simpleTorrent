!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BE_DICT	src/bencode.h	/^	BE_DICT,$/;"	e	enum:__anon1
BE_INT	src/bencode.h	/^	BE_INT,$/;"	e	enum:__anon1
BE_LIST	src/bencode.h	/^	BE_LIST,$/;"	e	enum:__anon1
BE_STR	src/bencode.h	/^	BE_STR,$/;"	e	enum:__anon1
BTDATA_H	src/btdata.h	6;"	d
BT_COMPLETED	src/btdata.h	23;"	d
BT_PROTOCOL	src/btdata.h	13;"	d
BT_PROTOCOL_LEN	src/btdata.h	14;"	d
BT_STARTED	src/btdata.h	21;"	d
BT_STOPPED	src/btdata.h	22;"	d
BUFSIZE	src/recv_from_peers.c	5;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= -std=c99 -g$/;"	m
Computed	src/sha1.h	/^    int Computed;               \/* Is the digest computed?          *\/$/;"	m	struct:SHA1Context
Corrupted	src/sha1.h	/^    int Corrupted;              \/* Is the message digest corruped?  *\/$/;"	m	struct:SHA1Context
DATA_PATH	src/parse_data_file.c	23;"	d	file:
HANDSHAKE_LEN	src/btdata.h	12;"	d
INFOHASH_LEN	src/btdata.h	15;"	d
KEEP_ALIVE_INTERVAL	src/btdata.h	18;"	d
LIBS	Makefile	/^LIBS= -lpthread$/;"	m
Length_High	src/sha1.h	/^    unsigned Length_High;       \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
Length_Low	src/sha1.h	/^    unsigned Length_Low;        \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
MAXLINE	src/util.h	21;"	d
MAXPEERS	src/btdata.h	17;"	d
Message_Block	src/sha1.h	/^    unsigned char Message_Block[64]; \/* 512-bit message blocks      *\/$/;"	m	struct:SHA1Context
Message_Block_Index	src/sha1.h	/^    int Message_Block_Index;    \/* Index into message block array   *\/$/;"	m	struct:SHA1Context
Message_Digest	src/sha1.h	/^    unsigned Message_Digest[5]; \/* Message Digest (output)          *\/$/;"	m	struct:SHA1Context
OBJS	Makefile	/^OBJS=src\/util.o \\$/;"	m
PEER_ID_LEN	src/btdata.h	16;"	d
SHA1CircularShift	src/sha1.c	46;"	d	file:
SHA1Context	src/sha1.h	/^typedef struct SHA1Context$/;"	s
SHA1Context	src/sha1.h	/^} SHA1Context;$/;"	t	typeref:struct:SHA1Context
SHA1Input	src/sha1.c	/^void SHA1Input(     SHA1Context         *context,$/;"	f
SHA1PadMessage	src/sha1.c	/^void SHA1PadMessage(SHA1Context *context)$/;"	f
SHA1ProcessMessageBlock	src/sha1.c	/^void SHA1ProcessMessageBlock(SHA1Context *context)$/;"	f
SHA1Reset	src/sha1.c	/^void SHA1Reset(SHA1Context *context)$/;"	f
SHA1Result	src/sha1.c	/^int SHA1Result(SHA1Context *context)$/;"	f
SHA_cmp	src/parse_data_file.c	/^int SHA_cmp(unsigned *Message_Digest,char *pieces)$/;"	f
SOURCES	Makefile	/^SOURCES=src\/util.c \\$/;"	m
TARGET	Makefile	/^TARGET=simpletorrent$/;"	m
TESTA	src/shatest.c	28;"	d	file:
TESTB	src/shatest.c	31;"	d	file:
TESTB_1	src/shatest.c	29;"	d	file:
TESTB_2	src/shatest.c	30;"	d	file:
TESTC	src/shatest.c	32;"	d	file:
UTIL_H	src/util.h	19;"	d
_BENCODE_H	src/bencode.h	14;"	d
_SHA1_H_	src/sha1.h	25;"	d
_announce_url_t	src/btdata.h	/^typedef struct _announce_url_t {$/;"	s
_be_decode	src/bencode.c	/^static be_node *_be_decode(const char **data, long long *data_len)$/;"	f	file:
_be_decode_int	src/bencode.c	/^static long long _be_decode_int(const char **data, long long *data_len)$/;"	f	file:
_be_decode_str	src/bencode.c	/^static char *_be_decode_str(const char **data, long long *data_len,int *len_len)$/;"	f	file:
_be_dump	src/bencode.c	/^static void _be_dump(be_node *node, ssize_t indent)$/;"	f	file:
_be_dump_indent	src/bencode.c	/^static void _be_dump_indent(ssize_t indent)$/;"	f	file:
_be_free_str	src/bencode.c	/^static inline void _be_free_str(char *str)$/;"	f	file:
_file_array	src/btdata.h	/^typedef struct _file_array{$/;"	s
_peer_t	src/btdata.h	/^typedef struct _peer_t {$/;"	s
_peerdata	src/btdata.h	/^typedef struct _peerdata {$/;"	s
_sub_file	src/btdata.h	/^typedef struct _sub_file{$/;"	s
_torrentmetadata	src/btdata.h	/^typedef struct _torrentmetadata {$/;"	s
_tracker_data	src/btdata.h	/^typedef struct _tracker_data {$/;"	s
_tracker_request	src/btdata.h	/^typedef struct _tracker_request {$/;"	s
_tracker_response	src/btdata.h	/^typedef struct _tracker_response {$/;"	s
alive	src/btdata.h	/^  int alive;$/;"	m	struct:_peer_t
alive_mutex	src/btdata.h	/^  pthread_mutex_t alive_mutex;$/;"	m	struct:_peer_t
alloc_peer	src/simpletorrent.c	/^int alloc_peer(char *peer_id)$/;"	f
announce	src/btdata.h	/^    char* announce; \/\/ tracker的URL$/;"	m	struct:_torrentmetadata
announce_url_t	src/btdata.h	/^} announce_url_t;$/;"	t	typeref:struct:_announce_url_t
be_alloc	src/bencode.c	/^static be_node *be_alloc(be_type type)$/;"	f	file:
be_decode	src/bencode.c	/^be_node *be_decode(const char *data)$/;"	f
be_decoden	src/bencode.c	/^be_node *be_decoden(const char *data, long long len)$/;"	f
be_dict	src/bencode.h	/^typedef struct be_dict {$/;"	s
be_dict	src/bencode.h	/^} be_dict;$/;"	t	typeref:struct:be_dict
be_dump	src/bencode.c	/^void be_dump(be_node *node)$/;"	f
be_free	src/bencode.c	/^void be_free(be_node *node)$/;"	f
be_node	src/bencode.h	/^typedef struct be_node {$/;"	s
be_node	src/bencode.h	/^} be_node;$/;"	t	typeref:struct:be_node
be_str_len	src/bencode.c	/^long long be_str_len(be_node *node)$/;"	f
be_type	src/bencode.h	/^} be_type;$/;"	t	typeref:enum:__anon1
buffer2file	src/parse_data_file.c	/^void buffer2file(int index,int begin,int length,char *buf)$/;"	f
check_and_keepalive	src/manager.c	/^void *check_and_keepalive(void *p){$/;"	f
choked	src/btdata.h	/^  int choked;         \/\/ 作为下载者, 我们被远端peer阻塞$/;"	m	struct:_peer_t
choking	src/btdata.h	/^  int choking;        \/\/ 作为上传者, 阻塞远端peer$/;"	m	struct:_peer_t
client_shutdown	src/shutdown.c	/^void client_shutdown(int sig)$/;"	f
connect_to_host	src/util.c	/^int connect_to_host(char* ip, int port)$/;"	f
connect_to_peer	src/connect_to_peers.c	/^void *connect_to_peer(void *p)$/;"	f
count	src/btdata.h	/^    int count;$/;"	m	struct:_torrentmetadata
create_file	src/parse_data_file.c	/^int *create_file(char *name,int len)$/;"	f
d	src/bencode.h	/^		struct be_dict *d;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_dict
data	src/btdata.h	/^  char* data;     \/\/ B编码的字符串$/;"	m	struct:_tracker_response
destroy_peer	src/simpletorrent.c	/^void destroy_peer(int pos)$/;"	f
downloaded	src/btdata.h	/^  int downloaded;$/;"	m	struct:_tracker_request
file2buffer	src/parse_data_file.c	/^void file2buffer(int index,int begin,int length,char *buf)$/;"	f
file_array	src/btdata.h	/^}file_array;$/;"	t	typeref:struct:_file_array
file_len	src/util.c	/^int file_len(FILE* fp)$/;"	f
find_in_poor	src/simpletorrent.c	/^int find_in_poor(peerdata *my_peer)$/;"	f
g_done	src/btdata.h	/^int g_done; \/\/ 表明程序是否应该终止$/;"	v
g_downloaded	src/btdata.h	/^int g_downloaded;$/;"	v
g_filedata	src/btdata.h	/^char* g_filedata;      \/\/ 文件的实际数据$/;"	v
g_filelen	src/btdata.h	/^int g_filelen;$/;"	v
g_infohash	src/btdata.h	/^int g_infohash[5]; \/\/ 要共享或要下载的文件的SHA1哈希值, 每个客户端同时只能处理一个文件$/;"	v
g_left	src/btdata.h	/^int g_left;$/;"	v
g_my_id	src/btdata.h	/^char g_my_id[20];$/;"	v
g_my_ip	src/btdata.h	/^char g_my_ip[128]; \/\/ 格式为XXX.XXX.XXX.XXX, null终止$/;"	v
g_num_pieces	src/btdata.h	/^int g_num_pieces;$/;"	v
g_peerport	src/btdata.h	/^int g_peerport; \/\/ peer监听的端口号$/;"	v
g_torrentmeta	src/btdata.h	/^torrentmetadata_t* g_torrentmeta;$/;"	v
g_tracker_ip	src/btdata.h	/^char g_tracker_ip[16]; \/\/ tracker的IP地址, 格式为XXX.XXX.XXX.XXX(null终止)$/;"	v
g_tracker_port	src/btdata.h	/^int g_tracker_port;$/;"	v
g_tracker_response	src/btdata.h	/^tracker_data *g_tracker_response;$/;"	v
g_uploaded	src/btdata.h	/^int g_uploaded;$/;"	v
get_peer_data	src/process_tracker_response.c	/^void get_peer_data(peerdata* peer, be_node* ben_res)$/;"	f
get_peers	src/process_tracker_response.c	/^void get_peers(tracker_data* td, be_node* peer_list)$/;"	f
get_tracker_data	src/process_tracker_response.c	/^tracker_data* get_tracker_data(char* data, int len)$/;"	f
handshake_packet	src/btdata.h	/^struct handshake_packet$/;"	s
have_interest	src/btdata.h	/^  int have_interest;  \/\/ 作为下载者, 对远端peer的分片有兴趣$/;"	m	struct:_peer_t
head_sub_file	src/btdata.h	/^    sub_file* head_sub_file;    \/\/只有当single_or_muti为1的时候这个指针才有效$/;"	m	struct:_torrentmetadata
hostname	src/btdata.h	/^  char* hostname;$/;"	m	struct:_announce_url_t
i	src/bencode.h	/^		long long i;$/;"	m	union:be_node::__anon2
id	src/btdata.h	/^  char id[21]; \/\/ 20用于null终止符$/;"	m	struct:_peer_t
id	src/btdata.h	/^  char id[21]; \/\/ 20用于null终止符$/;"	m	struct:_peerdata
info_hash	src/btdata.h	/^    char info_hash[20];$/;"	m	struct:handshake_packet
info_hash	src/btdata.h	/^    int info_hash[5]; \/\/ torrent的info_hash值(info键对应值的SHA1哈希值)$/;"	m	struct:_torrentmetadata
info_hash	src/btdata.h	/^  int info_hash[5];$/;"	m	struct:_tracker_request
init	src/simpletorrent.c	/^void init()$/;"	f
init_peer	src/simpletorrent.c	/^void init_peer(peerdata *my_peer,int pos)$/;"	f
interested	src/btdata.h	/^  int interested;     \/\/ 远端peer对我们的分片有兴趣$/;"	m	struct:_peer_t
interval	src/btdata.h	/^  int interval;$/;"	m	struct:_tracker_data
ip	src/btdata.h	/^  char ip[16]; \/\/ 自己的IP地址, 格式为XXX.XXX.XXX.XXX, 最后以'\\0'结尾$/;"	m	struct:_tracker_request
ip	src/btdata.h	/^  char* ip; \/\/ Null终止$/;"	m	struct:_peer_t
ip	src/btdata.h	/^  char* ip; \/\/ Null终止$/;"	m	struct:_peerdata
isSubpiecesReceived	src/btdata.h	/^int **isSubpiecesReceived;$/;"	v
key	src/bencode.h	/^	char *key;$/;"	m	struct:be_dict
l	src/bencode.h	/^		struct be_node **l;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_node
left	src/btdata.h	/^  int left;$/;"	m	struct:_tracker_request
len	src/btdata.h	/^    char len;$/;"	m	struct:handshake_packet
length	src/bencode.h	/^    int length;$/;"	m	struct:be_dict
length	src/bencode.h	/^    int length;$/;"	m	struct:be_node
length	src/btdata.h	/^    int length;     \/\/ 文件长度, 以字节为单位$/;"	m	struct:_torrentmetadata
length	src/btdata.h	/^    int length;$/;"	m	struct:_file_array
length	src/btdata.h	/^    int length;$/;"	m	struct:_sub_file
listen_peers	src/listen_peers.c	/^void *listen_peers(void *p)$/;"	f
main	src/_test.c	/^main ( int argc, char **argv )$/;"	f
main	src/shatest.c	/^int main()$/;"	f
main	src/simpletorrent.c	/^int main(int argc, char **argv)$/;"	f
make_listen_port	src/util.c	/^int make_listen_port(int port)$/;"	f
make_tracker_request	src/make_tracker_request.c	/^char* make_tracker_request(int event, int* mlen)$/;"	f
my_file_array	src/parse_data_file.c	/^file_array *my_file_array;$/;"	v
name	src/btdata.h	/^    char *name;$/;"	m	struct:_file_array
name	src/btdata.h	/^    char name[BT_PROTOCOL_LEN];$/;"	m	struct:handshake_packet
name	src/btdata.h	/^    char* name;     \/\/ 文件名$/;"	m	struct:_torrentmetadata
name	src/btdata.h	/^  char name[20];$/;"	m	struct:_peer_t
new_file	src/parse_data_file.c	/^int *new_file(torrentmetadata_t *meta_tree,char *name)$/;"	f
next	src/btdata.h	/^    struct _sub_file* next;$/;"	m	struct:_sub_file	typeref:struct:_sub_file::_sub_file
num_pieces	src/btdata.h	/^    int num_pieces; \/\/ 分片数量(为方便起见)$/;"	m	struct:_torrentmetadata
numpeers	src/btdata.h	/^  int numpeers;$/;"	m	struct:_tracker_data
parse_announce_url	src/parse_announce_url.c	/^announce_url_t* parse_announce_url(char* announce)$/;"	f
parse_data_file	src/parse_data_file.c	/^int *parse_data_file(torrentmetadata_t *meta_tree,int *num_piece)$/;"	f
parsetorrentfile	src/parsetorrentfile.c	/^torrentmetadata_t* parsetorrentfile(char* filename)$/;"	f
path	src/btdata.h	/^    char *path;$/;"	m	struct:_sub_file
peer_deal	src/listen_peers.c	/^void *peer_deal(void *i)$/;"	f
peer_id	src/btdata.h	/^    char peer_id[20];$/;"	m	struct:handshake_packet
peer_id	src/btdata.h	/^  char peer_id[20];$/;"	m	struct:_tracker_request
peer_t	src/btdata.h	/^} peer_t;$/;"	t	typeref:struct:_peer_t
peerdata	src/btdata.h	/^} peerdata;$/;"	t	typeref:struct:_peerdata
peers	src/btdata.h	/^  peerdata* peers;$/;"	m	struct:_tracker_data
peers_pool	src/btdata.h	/^peer_t peers_pool[MAXPEERS];$/;"	v
piece_len	src/btdata.h	/^    int piece_len;  \/\/ 每一个分片的字节数$/;"	m	struct:_torrentmetadata
pieces	src/btdata.h	/^    char* pieces;   \/\/ 针对所有分片的20字节长的SHA1哈希值连接而成的字符串$/;"	m	struct:_torrentmetadata
piecesInfo	src/btdata.h	/^  int *piecesInfo;$/;"	m	struct:_peer_t
piecesInfo	src/btdata.h	/^int *piecesInfo;$/;"	v
piecesNum	src/btdata.h	/^int piecesNum;$/;"	v
port	src/btdata.h	/^  int port;$/;"	m	struct:_announce_url_t
port	src/btdata.h	/^  int port;$/;"	m	struct:_peer_t
port	src/btdata.h	/^  int port;$/;"	m	struct:_peerdata
port	src/btdata.h	/^  int port;$/;"	m	struct:_tracker_request
preprocess_tracker_response	src/process_tracker_response.c	/^tracker_response* preprocess_tracker_response(int sockfd)$/;"	f
read_buf	src/parse_data_file.c	/^void read_buf(char *buf,int offset,int data_len)$/;"	f
recv_from_peer	src/recv_from_peers.c	/^void *recv_from_peer(void *p)$/;"	f
recvline	src/util.c	/^int recvline(int fd, char **line)$/;"	f
recvlinef	src/util.c	/^int recvlinef(int fd, char *format, ...)$/;"	f
reverse_byte_orderi	src/util.c	/^int reverse_byte_orderi(int i)$/;"	f
s	src/bencode.h	/^		char *s;$/;"	m	union:be_node::__anon2
sendBitField	src/manager.c	/^void sendBitField(int sockfd){$/;"	f
sendHave	src/manager.c	/^void sendHave(int sockfd, int index){$/;"	f
sendPiece	src/manager.c	/^void sendPiece(int sockfd, int index, int begin, int len){$/;"	f
sendRequest	src/manager.c	/^void sendRequest(int k){$/;"	f
sendshkhdmsg	src/recv_from_peers.c	/^void sendshkhdmsg(int sockfd)$/;"	f
single_or_muti	src/btdata.h	/^    char single_or_muti;$/;"	m	struct:_torrentmetadata
size	src/btdata.h	/^  int size;       \/\/ B编码字符串的字节数$/;"	m	struct:_tracker_response
sock_mutex	src/btdata.h	/^  pthread_mutex_t sock_mutex;$/;"	m	struct:_peer_t
sockfd	src/btdata.h	/^  int sockfd;$/;"	m	struct:_peer_t
status	src/btdata.h	/^  int status;$/;"	m	struct:_peer_t
strncmp1	src/process_tracker_response.c	/^int strncmp1 ( char * s1, char * s2, size_t n )$/;"	f
sub_file	src/btdata.h	/^}sub_file;$/;"	t	typeref:struct:_sub_file
subpiecesNum	src/btdata.h	/^int *subpiecesNum;$/;"	v
sum_of_file	src/parse_data_file.c	/^int sum_of_file;$/;"	v
torrentmetadata_t	src/btdata.h	/^} torrentmetadata_t;$/;"	t	typeref:struct:_torrentmetadata
tracker_data	src/btdata.h	/^} tracker_data;$/;"	t	typeref:struct:_tracker_data
tracker_free	src/simpletorrent.c	/^void tracker_free(tracker_data *t)$/;"	f
tracker_request	src/btdata.h	/^} tracker_request;$/;"	t	typeref:struct:_tracker_request
tracker_response	src/btdata.h	/^} tracker_response;$/;"	t	typeref:struct:_tracker_response
type	src/bencode.h	/^	be_type type;$/;"	m	struct:be_node
uploaded	src/btdata.h	/^  int uploaded;$/;"	m	struct:_tracker_request
used	src/btdata.h	/^  int used;$/;"	m	struct:_peer_t
val	src/bencode.h	/^	struct be_node *val;$/;"	m	struct:be_dict	typeref:struct:be_dict::be_node
val	src/bencode.h	/^	} val;$/;"	m	struct:be_node	typeref:union:be_node::__anon2
write_buf	src/parse_data_file.c	/^void write_buf(char *buf,int offset,int data_len)$/;"	f
