--------------------------------------------------------------------------------
Profile data file 'callgrind.out.15576' (creator: callgrind-3.8.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 203012671
Trigger: Program termination
Profiled target:  ./bin/simpletorrent torrents/wild.torrent 172.26.51.197 (PID 15576, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
           Ir 
--------------------------------------------------------------------------------
2,936,684,274  PROGRAM TOTALS

--------------------------------------------------------------------------------
           Ir  file:function
--------------------------------------------------------------------------------

      487,458  < src/sha1.c:SHA1PadMessage (102x) [/home/zwh/work/git/BitTorrent/bin/simpletorrent]
1,959,992,154  < src/sha1.c:SHA1Input (410126x) [/home/zwh/work/git/BitTorrent/bin/simpletorrent]
1,960,479,612  *  src/sha1.c:SHA1ProcessMessageBlock [/home/zwh/work/git/BitTorrent/bin/simpletorrent]

  972,413,256  *  src/sha1.c:SHA1Input [/home/zwh/work/git/BitTorrent/bin/simpletorrent]
1,959,992,154  >   src/sha1.c:SHA1ProcessMessageBlock (410126x) [/home/zwh/work/git/BitTorrent/bin/simpletorrent]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/sha1.c
--------------------------------------------------------------------------------
         Ir 

-- line 64 ----------------------------------------
          .   *
          .   *  Returns:
          .   *      Nothing.
          .   *
          .   *  Comments:
          .   *
          .   */
          .  void SHA1Reset(SHA1Context *context)
        204  {
        204      context->Length_Low             = 0;
        204      context->Length_High            = 0;
        204      context->Message_Block_Index    = 0;
          .  
        204      context->Message_Digest[0]      = 0x67452301;
        204      context->Message_Digest[1]      = 0xEFCDAB89;
        204      context->Message_Digest[2]      = 0x98BADCFE;
        204      context->Message_Digest[3]      = 0x10325476;
        204      context->Message_Digest[4]      = 0xC3D2E1F0;
          .  
        204      context->Computed   = 0;
        204      context->Corrupted  = 0;
        204  }
          .  
          .  /*
          .   *  SHA1Result
          .   *
          .   *  Description:
          .   *      This function will return the 160-bit message digest into the
          .   *      Message_Digest array within the SHA1Context provided
          .   *
-- line 93 ----------------------------------------
-- line 97 ----------------------------------------
          .   *
          .   *  Returns:
          .   *      1 if successful, 0 if it failed.
          .   *
          .   *  Comments:
          .   *
          .   */
          .  int SHA1Result(SHA1Context *context)
        306  {
          .  
        408      if (context->Corrupted)
          .      {
          .          return 0;
          .      }
          .  
        408      if (!context->Computed)
          .      {
        306          SHA1PadMessage(context);
    555,604  => src/sha1.c:SHA1PadMessage (102x)
        204          context->Computed = 1;
          .      }
          .  
        102      return 1;
        204  }
          .  
          .  /*
          .   *  SHA1Input
          .   *
          .   *  Description:
          .   *      This function accepts an array of octets as the next portion of
          .   *      the message.
          .   *
-- line 127 ----------------------------------------
-- line 138 ----------------------------------------
          .   *      Nothing.
          .   *
          .   *  Comments:
          .   *
          .   */
          .  void SHA1Input(     SHA1Context         *context,
          .                      const unsigned char *message_array,
          .                      unsigned            length)
        306  {
        204      if (!length)
          .      {
          .          return;
          .      }
          .  
        816      if (context->Computed || context->Corrupted)
          .      {
          .          context->Corrupted = 1;
          .          return;
          .      }
          .  
236,233,764      while(length-- && !context->Corrupted)
          .      {
183,736,896          context->Message_Block[context->Message_Block_Index++] =
 52,496,256              (*message_array & 0xFF);
          .  
131,240,640          context->Length_Low += 8;
          .          /* Force it to 32 bits */
104,992,512          context->Length_Low &= 0xFFFFFFFF;
104,992,512          if (context->Length_Low == 0)
          .          {
          .              context->Length_High++;
          .              /* Force it to 32 bits */
          .              context->Length_High &= 0xFFFFFFFF;
          .              if (context->Length_High == 0)
          .              {
          .                  /* Message is too long */
          .                  context->Corrupted = 1;
          .              }
          .          }
          .  
104,992,512          if (context->Message_Block_Index == 64)
          .          {
  1,230,378              SHA1ProcessMessageBlock(context);
1,959,992,154  => src/sha1.c:SHA1ProcessMessageBlock (410126x)
          .          }
          .  
 52,496,256          message_array++;
          .      }
        204  }
          .  
          .  /*
          .   *  SHA1ProcessMessageBlock
          .   *
          .   *  Description:
          .   *      This function will process the next 512 bits of the message
          .   *      stored in the Message_Block array.
          .   *
-- line 193 ----------------------------------------
-- line 200 ----------------------------------------
          .   *  Comments:
          .   *      Many of the variable names in the SHAContext, especially the
          .   *      single character names, were used because those were the names
          .   *      used in the publication.
          .   *
          .   *
          .   */
          .  void SHA1ProcessMessageBlock(SHA1Context *context)
  1,640,912  {
          .      const unsigned K[] =            /* Constants defined in SHA-1   */
          .      {
          .          0x5A827999,
          .          0x6ED9EBA1,
          .          0x8F1BBCDC,
          .          0xCA62C1D6
          .      };
          .      int         t;                  /* Loop counter                 */
          .      unsigned    temp;               /* Temporary word value         */
          .      unsigned    W[80];              /* Word sequence                */
          .      unsigned    A, B, C, D, E;      /* Word buffers                 */
          .  
          .      /*
          .       *  Initialize the first 16 words in the array W
          .       */
 21,331,856      for(t = 0; t < 16; t++)
          .      {
 59,072,832          W[t] = ((unsigned) context->Message_Block[t * 4]) << 24;
 78,763,776          W[t] |= ((unsigned) context->Message_Block[t * 4 + 1]) << 16;
 78,763,776          W[t] |= ((unsigned) context->Message_Block[t * 4 + 2]) << 8;
 72,200,128          W[t] |= ((unsigned) context->Message_Block[t * 4 + 3]);
          .      }
          .  
 80,404,688      for(t = 16; t < 80; t++)
          .      {
498,837,248          W[t] = SHA1CircularShift(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);
          .      }
          .  
  1,230,684      A = context->Message_Digest[0];
  1,230,684      B = context->Message_Digest[1];
  1,230,684      C = context->Message_Digest[2];
  1,230,684      D = context->Message_Digest[3];
  1,230,684      E = context->Message_Digest[4];
          .  
 26,254,592      for(t = 0; t < 20; t++)
          .      {
 49,227,360          temp =  SHA1CircularShift(5,A) +
106,659,280                  ((B & C) | ((~B) & D)) + E + W[t] + K[0];
          .          temp &= 0xFFFFFFFF;
 16,409,120          E = D;
 16,409,120          D = C;
 24,613,680          C = SHA1CircularShift(30,B);
 16,409,120          B = A;
 16,409,120          A = temp;
          .      }
          .  
 26,254,592      for(t = 20; t < 40; t++)
          .      {
131,272,960          temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[1];
          .          temp &= 0xFFFFFFFF;
 16,409,120          E = D;
 16,409,120          D = C;
 24,613,680          C = SHA1CircularShift(30,B);
 16,409,120          B = A;
 16,409,120          A = temp;
          .      }
          .  
 26,254,592      for(t = 40; t < 60; t++)
          .      {
 49,227,360          temp = SHA1CircularShift(5,A) +
114,863,840                 ((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];
          .          temp &= 0xFFFFFFFF;
 16,409,120          E = D;
 16,409,120          D = C;
 24,613,680          C = SHA1CircularShift(30,B);
 16,409,120          B = A;
 16,409,120          A = temp;
          .      }
          .  
 26,254,592      for(t = 60; t < 80; t++)
          .      {
131,272,960          temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[3];
          .          temp &= 0xFFFFFFFF;
 16,409,120          E = D;
 16,409,120          D = C;
 24,613,680          C = SHA1CircularShift(30,B);
 16,409,120          B = A;
 16,409,120          A = temp;
          .      }
          .  
    820,456      context->Message_Digest[0] =
  1,640,912          (context->Message_Digest[0] + A) & 0xFFFFFFFF;
    820,456      context->Message_Digest[1] =
  1,640,912          (context->Message_Digest[1] + B) & 0xFFFFFFFF;
    820,456      context->Message_Digest[2] =
  1,640,912          (context->Message_Digest[2] + C) & 0xFFFFFFFF;
    820,456      context->Message_Digest[3] =
  1,640,912          (context->Message_Digest[3] + D) & 0xFFFFFFFF;
    820,456      context->Message_Digest[4] =
  1,640,912          (context->Message_Digest[4] + E) & 0xFFFFFFFF;
          .  
    820,456      context->Message_Block_Index = 0;
  1,640,912  }
          .  
          .  /*
          .   *  SHA1PadMessage
          .   *
          .   *  Description:
          .   *      According to the standard, the message must be padded to an even
          .   *      512 bits.  The first padding bit must be a '1'.  The last 64
          .   *      bits represent the length of the original message.  All bits in
-- line 309 ----------------------------------------
-- line 319 ----------------------------------------
          .   *
          .   *  Returns:
          .   *      Nothing.
          .   *
          .   *  Comments:
          .   *
          .   */
          .  void SHA1PadMessage(SHA1Context *context)
        306  {
          .      /*
          .       *  Check to see if the current message block is too small to hold
          .       *  the initial padding bits and length.  If so, we will pad the
          .       *  block, process it, and then continue padding into a second
          .       *  block.
          .       */
        408      if (context->Message_Block_Index > 55)
          .      {
          .          context->Message_Block[context->Message_Block_Index++] = 0x80;
          .          while(context->Message_Block_Index < 64)
          .          {
          .              context->Message_Block[context->Message_Block_Index++] = 0;
          .          }
          .  
          .          SHA1ProcessMessageBlock(context);
-- line 342 ----------------------------------------
-- line 343 ----------------------------------------
          .  
          .          while(context->Message_Block_Index < 56)
          .          {
          .              context->Message_Block[context->Message_Block_Index++] = 0;
          .          }
          .      }
          .      else
          .      {
        714          context->Message_Block[context->Message_Block_Index++] = 0x80;
     22,694          while(context->Message_Block_Index < 56)
          .          {
     38,822              context->Message_Block[context->Message_Block_Index++] = 0;
          .          }
          .      }
          .  
          .      /*
          .       *  Store the message length as the last 8 octets
          .       */
        612      context->Message_Block[56] = (context->Length_High >> 24) & 0xFF;
        612      context->Message_Block[57] = (context->Length_High >> 16) & 0xFF;
        612      context->Message_Block[58] = (context->Length_High >> 8) & 0xFF;
        510      context->Message_Block[59] = (context->Length_High) & 0xFF;
        612      context->Message_Block[60] = (context->Length_Low >> 24) & 0xFF;
        612      context->Message_Block[61] = (context->Length_Low >> 16) & 0xFF;
        612      context->Message_Block[62] = (context->Length_Low >> 8) & 0xFF;
        510      context->Message_Block[63] = (context->Length_Low) & 0xFF;
          .  
        306      SHA1ProcessMessageBlock(context);
    487,458  => src/sha1.c:SHA1ProcessMessageBlock (102x)
        204  }

--------------------------------------------------------------------------------
 Ir 
--------------------------------------------------------------------------------
100  percentage of events annotated

